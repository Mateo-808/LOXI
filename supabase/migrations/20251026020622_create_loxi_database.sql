/*
  # Crear Base de Datos Loxi
  
  1. Nuevas Tablas
    - `usuarios`
      - `id` (uuid, primary key)
      - `nombre` (text)
      - `correo` (text, unique)
      - `fecha_registro` (timestamptz)
      - `contrasena` (text)
      - `id_auth` (uuid, unique)
      - `es_admin` (boolean)
    - `actividad_usuarios`
      - `id` (integer, primary key)
      - `user_id` (uuid, foreign key)
      - `accion` (varchar)
      - `created_at` (timestamp)
    - `ejercicios`
      - `id` (uuid, primary key)
      - `titulo` (text)
      - `descripcion` (text)
      - `nivel` (text con check)
      - `tipo` (text con check)
      - `archivo` (text)
    - `juegos`
      - `id` (uuid, primary key)
      - `nombre` (text)
      - `descripcion` (text)
      - `archivo` (text)
      - `nivel` (text con check)
    - `progreso`
      - `id` (uuid, primary key)
      - `usuario_id` (uuid, foreign key)
      - `ejercicio_id` (uuid, foreign key)
      - `completado` (boolean)
      - `puntuacion` (integer)
      - `intentos` (integer)
      - `fecha` (timestamp)
      - `nivel` (varchar con check)
    - `comentarios`
      - `id` (uuid, primary key)
      - `mensaje` (text)
      - `fecha` (timestamptz)
      - `usuario_id` (uuid, foreign key)
      
  2. Seguridad
    - Habilitar RLS en todas las tablas
    - Crear políticas restrictivas para cada tabla
    - Los administradores pueden ver y modificar todo
    - Los usuarios regulares solo pueden ver y modificar su propia información
*/

-- Habilitar extensiones necesarias
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Tabla usuarios
CREATE TABLE IF NOT EXISTS public.usuarios (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  nombre text NOT NULL,
  correo text NOT NULL UNIQUE,
  fecha_registro timestamp with time zone DEFAULT now(),
  contrasena text,
  id_auth uuid UNIQUE,
  es_admin boolean DEFAULT false CHECK (es_admin = ANY (ARRAY[true, false])),
  CONSTRAINT usuarios_pkey PRIMARY KEY (id)
);

ALTER TABLE public.usuarios ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Admins can view all users"
  ON public.usuarios FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

CREATE POLICY "Users can view own profile"
  ON public.usuarios FOR SELECT
  TO authenticated
  USING (id_auth = auth.uid());

CREATE POLICY "Admins can update all users"
  ON public.usuarios FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

CREATE POLICY "Users can update own profile"
  ON public.usuarios FOR UPDATE
  TO authenticated
  USING (id_auth = auth.uid())
  WITH CHECK (id_auth = auth.uid());

CREATE POLICY "Anyone can insert users"
  ON public.usuarios FOR INSERT
  TO authenticated
  WITH CHECK (true);

CREATE POLICY "Admins can delete users"
  ON public.usuarios FOR DELETE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

-- Tabla actividad_usuarios
CREATE TABLE IF NOT EXISTS public.actividad_usuarios (
  id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  user_id uuid,
  accion character varying,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT actividad_usuarios_pkey PRIMARY KEY (id),
  CONSTRAINT actividad_usuarios_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);

ALTER TABLE public.actividad_usuarios ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Admins can view all activity"
  ON public.actividad_usuarios FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

-- Tabla ejercicios
CREATE TABLE IF NOT EXISTS public.ejercicios (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  titulo text NOT NULL,
  descripcion text,
  nivel text CHECK (nivel = ANY (ARRAY['Principiante', 'Novato', 'Intermedio', 'Avanzado'])),
  tipo text CHECK (tipo = ANY (ARRAY['texto', 'opcion_multiple', 'juego'])),
  archivo text,
  CONSTRAINT ejercicios_pkey PRIMARY KEY (id)
);

ALTER TABLE public.ejercicios ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Anyone can view exercises"
  ON public.ejercicios FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Admins can insert exercises"
  ON public.ejercicios FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

CREATE POLICY "Admins can update exercises"
  ON public.ejercicios FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

CREATE POLICY "Admins can delete exercises"
  ON public.ejercicios FOR DELETE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

-- Tabla juegos
CREATE TABLE IF NOT EXISTS public.juegos (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  nombre text NOT NULL,
  descripcion text,
  archivo text,
  nivel text CHECK (nivel = ANY (ARRAY['fácil', 'medio', 'difícil'])),
  CONSTRAINT juegos_pkey PRIMARY KEY (id)
);

ALTER TABLE public.juegos ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Anyone can view games"
  ON public.juegos FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Admins can insert games"
  ON public.juegos FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

CREATE POLICY "Admins can update games"
  ON public.juegos FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

CREATE POLICY "Admins can delete games"
  ON public.juegos FOR DELETE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

-- Tabla progreso
CREATE TABLE IF NOT EXISTS public.progreso (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  usuario_id uuid,
  ejercicio_id uuid,
  completado boolean DEFAULT false,
  puntuacion integer DEFAULT 0,
  intentos integer DEFAULT 0,
  fecha timestamp without time zone DEFAULT now(),
  nivel character varying CHECK (nivel::text = ANY (ARRAY['Novato', 'Principiante', 'Intermedio', 'Avanzado'])),
  CONSTRAINT progreso_pkey PRIMARY KEY (id),
  CONSTRAINT progreso_usuario_id_fkey FOREIGN KEY (usuario_id) REFERENCES public.usuarios(id),
  CONSTRAINT progreso_ejercicio_id_fkey FOREIGN KEY (ejercicio_id) REFERENCES public.ejercicios(id)
);

ALTER TABLE public.progreso ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Admins can view all progress"
  ON public.progreso FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

CREATE POLICY "Users can view own progress"
  ON public.progreso FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id = usuario_id AND u.id_auth = auth.uid()
    )
  );

CREATE POLICY "Users can insert own progress"
  ON public.progreso FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id = usuario_id AND u.id_auth = auth.uid()
    )
  );

CREATE POLICY "Users can update own progress"
  ON public.progreso FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id = usuario_id AND u.id_auth = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id = usuario_id AND u.id_auth = auth.uid()
    )
  );

-- Tabla comentarios
CREATE TABLE IF NOT EXISTS public.comentarios (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  mensaje text,
  fecha timestamp with time zone DEFAULT now(),
  usuario_id uuid,
  CONSTRAINT comentarios_pkey PRIMARY KEY (id),
  CONSTRAINT comentarios_usuario_id_fkey FOREIGN KEY (usuario_id) REFERENCES public.usuarios(id)
);

ALTER TABLE public.comentarios ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Admins can view all comments"
  ON public.comentarios FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );

CREATE POLICY "Users can view own comments"
  ON public.comentarios FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id = usuario_id AND u.id_auth = auth.uid()
    )
  );

CREATE POLICY "Users can insert comments"
  ON public.comentarios FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id = usuario_id AND u.id_auth = auth.uid()
    )
  );

CREATE POLICY "Admins can delete comments"
  ON public.comentarios FOR DELETE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.usuarios u
      WHERE u.id_auth = auth.uid() AND u.es_admin = true
    )
  );